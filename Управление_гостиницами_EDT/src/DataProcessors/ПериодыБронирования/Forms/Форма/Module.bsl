
Процедура ЗаписатьВРегистр(ДанныеДляЗаписи)
	
	НаборЗаписей = РегистрыСведений.ПериодыБронирования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДанныеДляЗаписи.Объект);
	НаборЗаписей.Отбор.ПериодБронирования.Установить(ТекущийПериод);
	НаборЗаписей.Прочитать();
	                            
	ПолученоЗаписей  = НаборЗаписей.Количество();
	
	Если ЗначениеЗаполнено(ДанныеДляЗаписи.ДатаНачалаБронирования) 
		И ЗначениеЗаполнено(ДанныеДляЗаписи.ДатаОкончанияБронирования) 
		И ДанныеДляЗаписи.Пометка Тогда //Добавляем/обновляем запись
		Режим = "Добавление";
	Иначе //Очищаем запись
		Режим = "Удаление";
	КонецЕсли;
	
	
	
	Если Режим = "Добавление" Тогда
		Если ПолученоЗаписей = 0 Тогда
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.Объект = ДанныеДляЗаписи.Объект;
			ЗаписьРегистра.ПериодБронирования = ТекущийПериод;
		Иначе
			ЗаписьРегистра = НаборЗаписей[0];	
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра,ДанныеДляЗаписи);
		НаборЗаписей.Записать(Истина);
	Иначе
		Если НЕ ПолученоЗаписей = 0 Тогда
			НаборЗаписей.Очистить();		
		КонецЕсли;
	КонецЕсли; 
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура ЗаписатьПериодыВРегистр()
	КорневыеЭлементы = ОбъектыБронирования.ПолучитьЭлементы();
	Для каждого КорневойЭлемент Из КорневыеЭлементы Цикл
		Если КорневойЭлемент.Объект.ГостиничныйКомплекс Тогда
			ЭлементыКомплекса = КорневойЭлемент.ПолучитьЭлементы();
			Для каждого Подчиненный Из ЭлементыКомплекса Цикл
				ЗаписатьВРегистр(Подчиненный);
			КонецЦикла;
		Иначе
			ЗаписатьВРегистр(КорневойЭлемент);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОбъекты()
	КорневыеЭлементы = ОбъектыБронирования.ПолучитьЭлементы();
	КорневыеЭлементы.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Разрешенные
		|	Гостиницы.Ссылка КАК Объект,
		|	Гостиницы.Наименование КАК НаименованиеОбъекта,
		|	Гостиницы.ГостиничныйКомплекс КАК ГостиничныйКомплекс
		|ИЗ
		|	Справочник.Гостиницы КАК Гостиницы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Корпуса.Ссылка КАК Объект,
		|	Корпуса.Наименование КАК НаименованиеОбъекта,
		|	Корпуса.Владелец КАК Владелец
		|ИЗ
		|	Справочник.Корпуса КАК Корпуса";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	РезультатПоГостиницам = РезультатЗапроса[0];
	ТаблицаКорпусов = РезультатЗапроса[1].Выгрузить();
	ВыборкаПоГостиницам = РезультатПоГостиницам.Выбрать();
	Пока ВыборкаПоГостиницам.Следующий() Цикл
		ТекЭлемент = КорневыеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекЭлемент,ВыборкаПоГостиницам);
		Если ВыборкаПоГостиницам.ГостиничныйКомплекс Тогда
			ЭлементыКомплекса = ТекЭлемент.ПолучитьЭлементы();
			НайденыеКорпуса = ТаблицаКорпусов.НайтиСтроки(Новый Структура("Владелец",ВыборкаПоГостиницам.Объект));
			Для каждого РезультатПОКорпусу Из НайденыеКорпуса Цикл
				ТекПодчиненный = ЭлементыКомплекса.Добавить();
				ЗаполнитьЗначенияСвойств(ТекПодчиненный,РезультатПоКорпусу);
				
			КонецЦикла;
			
		КонецЕсли; 
	
	КонецЦикла; 
	

КонецПроцедуры

Процедура ЗаполнитьСписокПериодов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПериодыБронирования.ПериодБронирования КАК Период
		|ИЗ
		|	РегистрСведений.ПериодыБронирования КАК ПериодыБронирования";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СписокПериодов.Очистить();
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = СписокПериодов.Добавить(Выборка.Период,Выборка.Период);
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьПериоды()
	ЗаполнитьСписокПериодов(); 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Разрешенные
		|	ПериодыБронирования.Объект КАК Объект,
		|	ПериодыБронирования.ДатаНачалаБронирования КАК ДатаНачалаБронирования,
		|	ПериодыБронирования.ДатаОкончанияБронирования КАК ДатаОкончанияБронирования
		|ИЗ
		|	РегистрСведений.ПериодыБронирования КАК ПериодыБронирования
		|ГДЕ
		|	ПериодыБронирования.ПериодБронирования = &ПериодБронирования";
	
	Запрос.УстановитьПараметр("ПериодБронирования", ТекущийПериод);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	КорневыеЭлементы = ОбъектыБронирования.ПолучитьЭлементы();
	
	Для каждого ТекущийКорневой Из КорневыеЭлементы Цикл
		
		СтрокаТаблицы = ТаблицаРезультата.Найти(ТекущийКорневой.Объект,"Объект");
		Если СтрокаТаблицы  = Неопределено Тогда
			ТекущийКорневой.ДатаНачалаБронирования = '00010101000000';
			ТекущийКорневой.ДатаОкончанияБронирования = '00010101000000';
			ТекущийКорневой.Пометка = ЛОЖЬ;
		ИначеЕсли НЕ СтрокаТаблицы.Объект.ГостиничныйКомплекс И СтрокаТаблицы.ДатаНачалаБронирования = '00010101000000' Тогда
			ТекущийКорневой.Пометка = ЛОЖЬ;
		Иначе                              
			ТекущийКорневой.Пометка = ИСТИНА;
			ЗаполнитьЗначенияСвойств(ТекущийКорневой,СтрокаТаблицы,"ДатаНачалаБронирования,ДатаОкончанияБронирования");	
		КонецЕсли;			
		Подчиненные = ТекущийКорневой.ПолучитьЭлементы();
		
		Для каждого Подчиненный Из Подчиненные Цикл
			СтрокаТаблицы = ТаблицаРезультата.Найти(Подчиненный.Объект,"Объект");
			Если НЕ СтрокаТаблицы = Неопределено Тогда
				
				Подчиненный.Пометка = НЕ СтрокаТаблицы.ДатаНачалаБронирования = '00010101000000';
				ЗаполнитьЗначенияСвойств(Подчиненный,СтрокаТаблицы,"ДатаНачалаБронирования,ДатаОкончанияБронирования");
				ОбщегоНазначенияКлиентСервер.ПроставитьПометкиВверх(Подчиненный);
			Иначе
				Подчиненный.Пометка = ЛОЖЬ;
				Подчиненный.ДатаНачалаБронирования = '00010101000000';
				Подчиненный.ДатаОкончанияБронирования = '00010101000000';
				ОбщегоНазначенияКлиентСервер.ПроставитьПометкиВверх(Подчиненный);
			КонецЕсли; 
			
		КонецЦикла;
		
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОбъектыИПериоды()
	
	ЗаполнитьОбъекты();
	ЗаполнитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()

	ЗаполнитьПериоды();

КонецПроцедуры


&НаКлиенте
Процедура ПослеВопросаОДобавленииПериода(Результат,НовыйПериод) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущаяЗапись = СписокПериодов.НайтиПоЗначению(ТекущийПериод);
		Если ТекущийПериод < НовыйПериод Тогда
			СписокПериодов.Вставить(СписокПериодов.Индекс(ТекущаяЗапись) + 1,НовыйПериод,НовыйПериод);
		Иначе
			СписокПериодов.Вставить(СписокПериодов.Индекс(ТекущаяЗапись),НовыйПериод,НовыйПериод);
		КонецЕсли; 
		ТекущийПериод = НовыйПериод;
		ПриИзмененииПериода();
	КонецЕсли; 

КонецПроцедуры


&НаКлиенте
Процедура ПредыдущийПериод(Команда = Неопределено)
	ПериодДляПоиска = ТекущийПериод - 1;
	ТекущееЗначение = СписокПериодов.НайтиПоЗначению(ПериодДляПоиска);
	Если ТекущееЗначение = Неопределено Тогда //Период отсутствует в списке периодов
		Если ПериодДляПоиска < Год(ТекущаяДата()) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОДобавленииПериода",ЭтаФОрма,ПериодДляПоиска);
			ПоказатьВопрос(ОписаниеОповещения,"Добавить предыдущий период бронирования (" + Формат(ПериодДляПоиска,"ЧГ=") + "г.)?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,"Новый период");
		КонецЕсли; 
	Иначе
		ТекущийПериод = ПериодДляПоиска;
		ПриИзмененииПериода();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийПериод(Команда)
	ПериодДляПоиска = ТекущийПериод + 1;
	ТекущееЗначение = СписокПериодов.НайтиПоЗначению(ПериодДляПоиска);
	Если ТекущееЗначение = Неопределено Тогда //Период отсутствует в списке периодов
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОДобавленииПериода",ЭтаФОрма,ПериодДляПоиска);
		ПоказатьВопрос(ОписаниеОповещения,"Добавить новый период бронирования (" + Формат(ПериодДляПоиска,"ЧГ=") + "г.)?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,"Новый период");
	Иначе
		ТекущийПериод = ПериодДляПоиска;
		ПриИзмененииПериода();
	КонецЕсли; 
	
КонецПроцедуры



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТекЭлемент = СписокПериодов.НайтиПоЗначению(ТекущийПериод);
	Если ТекЭлемент = Неопределено Тогда
		ТекущийПериод = Год(ТекущаяДата());
		Если СписокПериодов.Количество() = 0 Тогда
			СписокПериодов.Добавить(ТекущийПериод);
		Иначе
			ТекЭлемент = СписокПериодов.НайтиПоЗначению(ТекущийПериод);
			Если ТекЭлемент = Неопределено Тогда
				
				ТекущийПериод = СписокПериодов.Получить(СписокПериодов.Количество()-1).Значение;
				
			КонецЕсли; 
			
		КонецЕсли;		
		
	КонецЕсли;
	
	
	ЗаполнитьОбъектыИПериоды();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыБронированияПометкаПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.ИзменениеПометки(ОбъектыБронирования.НайтиПоИдентификатору(Элементы.ОбъектыБронирования.ТекущаяСтрока));
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	ЗаписатьПериодыВРегистр();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбУстановкеДатыПодчиненным(Результат,ДопПараметры) Экспорт
	
	ТекущаяСтрока = ДопПараметры.ТекущаяСтрока;
	ТекущийРеквизит = ДопПараметры.ТекущийРеквизит;
	
	Если Результат  = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 		
	
	Подчиненные = ТекущаяСтрока.ПолучитьЭлементы();

	Для каждого Подчиненный Из Подчиненные Цикл
		
		Подчиненный[ТекущийРеквизит] = ТекущаяСтрока[ТекущийРеквизит];
	
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбъектыБронированияДатаНачалаБронированияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОбъектыБронирования.ТекущиеДанные;
	Если НЕ Год(ТекущиеДанные.ДатаНачалаБронирования) = ТекущийПериод Тогда
	
		ТекущиеДанные.ДатаНачалаБронирования = Дата(ТекущийПериод,Месяц(ТекущиеДанные.ДатаНачалаБронирования),День(ТекущиеДанные.ДатаНачалаБронирования));		
	
	КонецЕсли; 
	ТекСтрока = ОбъектыБронирования.НайтиПоИдентификатору(Элементы.ОбъектыБронирования.ТекущаяСтрока);
	
	Если НЕ ТекСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
		ДопПараметры = Новый Структура("ТекущаяСтрока,ТекущийРеквизит",ТекСтрока,"ДатаНачалаБронирования");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОбУстановкеДатыПодчиненным",ЭтаФорма,ДопПараметры);
	    ПоказатьВопрос(ОписаниеОповещения,"Установить эту дату подчиненным объектам",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыБронированияДатаОкончанияБронированияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОбъектыБронирования.ТекущиеДанные;
	Если НЕ Год(ТекущиеДанные.ДатаОкончанияБронирования) = ТекущийПериод Тогда
	
		ТекущиеДанные.ДатаОкончанияБронирования = Дата(ТекущийПериод,Месяц(ТекущиеДанные.ДатаОкончанияБронирования),День(ТекущиеДанные.ДатаОкончанияБронирования));		
	
	КонецЕсли; 
	ТекСтрока = ОбъектыБронирования.НайтиПоИдентификатору(Элементы.ОбъектыБронирования.ТекущаяСтрока);
	
	Если НЕ ТекСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
		ДопПараметры = Новый Структура("ТекущаяСтрока,ТекущийРеквизит",ТекСтрока,"ДатаОкончанияБронирования");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОбУстановкеДатыПодчиненным",ЭтаФорма,ДопПараметры);
	    ПоказатьВопрос(ОписаниеОповещения,"Установить эту дату подчиненным объектам",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ТекущийПериод",ТекущийПериод);
	
	Если НЕ ТекущийПериод = 0 Тогда
		РежимВыбораПериода = Истина;
		ЗаполнитьСписокПериодов();
		СписокПериодов.Добавить(ТекущийПериод,ТекущийПериод);
		ЭтаФорма.АвтоматическоеСохранениеДанныхВНастройках = АвтоматическоеСохранениеДанныхФормыВНастройках.НеИспользовать;	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	ЭтаФорма.Закрыть(ТекущийПериод);
КонецПроцедуры
