Процедура ЗаполнитьДанныеПоНомерам(ДатаНачала,ДатаОкончания,ОбъектПланировщик)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыНомеров.Регистратор КАК Регистратор,
		|	СтатусыНомеров.Статус КАК Статус,
		|	СтатусыНомеров.Номер КАК Номер
		|ПОМЕСТИТЬ СтатусыНомеров
		|ИЗ
		|	РегистрСведений.СтатусыНомеров КАК СтатусыНомеров
		|ГДЕ
		|	СтатусыНомеров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыНомеров.Регистратор,
		|	СтатусыНомеров.Статус,
		|	СтатусыНомеров.Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КарточкаБронированияСоставБрони.Номер КАК Номер,
		|	КарточкаБронированияСоставБрони.ДатаЗаезда КАК ДатаЗаезда,
		|	ВЫБОР
		|		КОГДА КарточкаБронированияСоставБрони.ДатаВыселения = КарточкаБронированияСоставБрони.Ссылка.ДатаВыселения
		|			ТОГДА ДОБАВИТЬКДАТЕ(КарточкаБронированияСоставБрони.ДатаВыселения, СЕКУНДА, -1)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(КарточкаБронированияСоставБрони.ДатаВыселения, ДЕНЬ)
		|	КОНЕЦ КАК ДатаВыселения,
		|	КарточкаБронированияСоставБрони.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ИнтервалыБронирований
		|ИЗ
		|	Документ.КарточкаБронирования.СоставБрони КАК КарточкаБронированияСоставБрони
		|ГДЕ
		|	КарточкаБронированияСоставБрони.Ссылка В
		|			(ВЫБРАТЬ
		|				СтатусыНомеров.Регистратор КАК Регистратор
		|			ИЗ
		|				СтатусыНомеров КАК СтатусыНомеров
		|			СГРУППИРОВАТЬ ПО
		|				СтатусыНомеров.Регистратор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыНомеров.Номер КАК Номер,
		|	СтатусыНомеров.Регистратор КАК ДокументБронирования,
		|	СтатусыНомеров.Статус КАК Статус,
		|	ИнтервалыБронирований.ДатаЗаезда КАК ДатаЗаезда,
		|	ИнтервалыБронирований.ДатаВыселения КАК ДатаВыселения
		|ИЗ
		|	СтатусыНомеров КАК СтатусыНомеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИнтервалыБронирований КАК ИнтервалыБронирований
		|		ПО СтатусыНомеров.Регистратор = ИнтервалыБронирований.Ссылка
		|			И СтатусыНомеров.Номер = ИнтервалыБронирований.Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер,
		|	ДатаЗаезда
		|ИТОГИ ПО
		|	Номер,
		|	ДокументБронирования";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНомера = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЦветОбъекта 		= Новый Цвет(251,249,236);
	ЦветСвободного 		= Новый Цвет(245,242,221);
	ЦветНедоступного 	= Новый Цвет(200,200,200);
	ЦветЗабронированного 	= Новый Цвет(179,172,134);
	ЦветПредБронированного 	= Новый Цвет(179,220,134);
	
	Пока ВыборкаНомера.Следующий() Цикл
		СоответствиеЗначения = Новый Соответствие();
		СоответствиеЗначения.Вставить("ГостиницыКорпуса",ВыборкаНомера.Номер);
		ЗначениеИзмерений = Новый ФиксированноеСоответствие(СоответствиеЗначения);
		ВыборкаБронирования = ВыборкаНомера.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаБронирования.Следующий() Цикл
			Выборка = ВыборкаБронирования.Выбрать();
			ДокументБронирования = ВыборкаБронирования.ДокументБронирования;
			ТекстЭлемента = ДокументБронирования.Клиент.Наименование;
			ТекстПодсказки = ДокументБронирования.Клиент.Наименование + " Взрослых\Детей " + ДокументБронирования.Взрослых + "\" + ДокументБронирования.Детей + " " + ДокументБронирования.Комментарий;
			ЦветФона = ?(ДокументБронирования.СтатусБрони = Перечисления.СтатусБрони.Предварительная,ЦветПредБронированного,ЦветЗабронированного);
			КоличествоЗаписей = Выборка.Количество();
			СтруктураЗначений = Новый Структура;
			Пока Выборка.Следующий() Цикл
			
				Если СтруктураЗначений.Свойство("Начало") Тогда //Если в структуре присутствуют элементы
																//значит это уже не первый проход в группировке
					Если СтруктураЗначений.Конец + 1 = Выборка.ДатаЗаезда Тогда //Если следующийПериод является продолжением предыдущего
						СтруктураЗначений.Конец = Выборка.ДатаВыселения;
						Продолжить;
					Иначе
						НовыйЭлемент = ОбъектПланировщик.Элементы.Добавить(СтруктураЗначений.Начало,СтруктураЗначений.Конец);
						НовыйЭлемент.Загрузить(СтруктураЗначений);
						СтруктураЗначений = Новый Структура;
					КонецЕсли; 
				
				КонецЕсли; 
				
				СтруктураЗначений.Вставить("Начало",Выборка.ДатаЗаезда);
				СтруктураЗначений.Вставить("Конец",Выборка.ДатаВыселения);
				СтруктураЗначений.Вставить("Значение",ДокументБронирования);
				СтруктураЗначений.Вставить("ЗначенияИзмерений",ЗначениеИзмерений);
				СтруктураЗначений.Вставить("Текст",ТекстЭлемента);
				СтруктураЗначений.Вставить("Подсказка",ТекстПодсказки);
				СтруктураЗначений.Вставить("ЦветФона",ЦветФона);
				
				
				//НовыйЭлемент = ОбъектПланировщик.Элементы.Добавить(НачалоДня(ЗначениеОбъекта.ДатаЗаезда),КонецДня(ЗначениеОбъекта .ДатаВыселения-1));
				//НовыйЭлемент.Значение = ЗначениеОбъекта ;
				//НовыйЭлемент.Текст = ЗначениеОбъекта.Клиент.Наименование + " " + ЗначениеОбъекта.Взрослых + "\" + ЗначениеОбъекта.Детей + " " + ЗначениеОбъекта.Комментарий;
				//НовыйЭлемент.ЦветФона = 
				//СоответствиеЗначения = Новый Соответствие();
				//СоответствиеЗначения.Вставить("ГостиницыКорпуса",ВыборкаБронирования.Номер);
				//НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеЗначения);	
			
			КонецЦикла; 
			НовыйЭлемент = ОбъектПланировщик.Элементы.Добавить(СтруктураЗначений.Начало,СтруктураЗначений.Конец);
			НовыйЭлемент.Загрузить(СтруктураЗначений);
				
			
		КонецЦикла
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокОбъектов(ПараметрыПолученияДанных) Экспорт
		
	//Пока для наших целей достаточно получить список объектов для которых открыто бронирование в текущем периоде
	//Позже, при получении интервалов для диапазона дат - будем думать как это лучше реализовать;
	ПериодБронирования = ПараметрыПолученияДанных.ТекущийПериод;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПериодыБронирования.Объект) = ТИП(Справочник.Корпуса)
		|			ТОГДА ПериодыБронирования.Объект.Владелец
		|		ИНАЧЕ ПериодыБронирования.Объект
		|	КОНЕЦ КАК Гостиница
		|ПОМЕСТИТЬ Гостиницы
		|ИЗ
		|	РегистрСведений.ПериодыБронирования КАК ПериодыБронирования
		|ГДЕ
		|	ПериодыБронирования.ПериодБронирования = &ПериодБронирования
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПериодыБронирования.Объект) = ТИП(Справочник.Корпуса)
		|			ТОГДА ПериодыБронирования.Объект.Владелец
		|		ИНАЧЕ ПериодыБронирования.Объект
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыБронирования.Объект КАК Объект
		|ПОМЕСТИТЬ Корпуса
		|ИЗ
		|	РегистрСведений.ПериодыБронирования КАК ПериодыБронирования
		|ГДЕ
		|	ПериодыБронирования.ПериодБронирования = &ПериодБронирования
		|	И ПериодыБронирования.Объект.Владелец В
		|			(ВЫБРАТЬ
		|				Гостиницы.Гостиница КАК Гостиница
		|			ИЗ
		|				Гостиницы КАК Гостиницы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Гостиницы.Гостиница КАК Гостиница,
		|	Корпуса.Объект КАК Объект
		|ПОМЕСТИТЬ ГостиницыИКорпуса
		|ИЗ
		|	Гостиницы КАК Гостиницы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Корпуса КАК Корпуса
		|		ПО Гостиницы.Гостиница.Ссылка = Корпуса.Объект.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номера.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Номера
		|ИЗ
		|	Справочник.Номера КАК Номера
		|ГДЕ
		|	(Номера.Владелец В
		|				(ВЫБРАТЬ
		|					Гостиницы.Гостиница КАК Ссылка
		|				ИЗ
		|					Гостиницы КАК Гостиницы)
		|			ИЛИ Номера.Владелец В
		|				(ВЫБРАТЬ
		|					Корпуса.Объект КАК Ссылка
		|				ИЗ
		|					Корпуса КАК Корпуса))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГостиницыИКорпуса.Гостиница КАК Гостиница,
		|	ГостиницыИКорпуса.Объект КАК Корпус,
		|	Номера.Ссылка КАК Номер
		|ИЗ
		|	ГостиницыИКорпуса КАК ГостиницыИКорпуса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Номера КАК Номера
		|		ПО (ГостиницыИКорпуса.Гостиница.Ссылка = Номера.Ссылка.Владелец
		|				ИЛИ ГостиницыИКорпуса.Объект.Ссылка = Номера.Ссылка.Владелец)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГостиницыИКорпуса.Гостиница.Наименование,
		|	ГостиницыИКорпуса.Объект.Наименование,
		|	Номера.Ссылка.Наименование
		|ИТОГИ ПО
		|	Гостиница,
		|	Корпус";
	
	Запрос.УстановитьПараметр("ПериодБронирования", ПериодБронирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаГостиница = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	//Пока ВыборкаГостиница.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаГостиница
	//
	//	ВыборкаКорпус = ВыборкаГостиница.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//	Пока ВыборкаКорпус.Следующий() Цикл
	//		// Вставить обработку выборки ВыборкаКорпус
	//
	//		ВыборкаДетальныеЗаписи = ВыборкаКорпус.Выбрать();
	//
	//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//			// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЦикла;
	
	
	 Возврат РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам) 
	

КонецФункции // ПолучитьСписокОбъектов()


Функция ПолучитьДатыИнтерваловБронирования(Период = Неопределено,ОбъектБронирования = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
	
		Период = ГОД(ТекущаяДата());
	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МИНИМУМ(ПериодыБронирования.ДатаНачалаБронирования),ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНачала,
		|	ЕСТЬNULL(МАКСИМУМ(ПериодыБронирования.ДатаОкончанияБронирования),ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.ПериодыБронирования КАК ПериодыБронирования
		|ГДЕ
		|	ПериодыБронирования.ПериодБронирования = &Период";
	Запрос.Текст = Запрос.Текст + ?(ОбъектБронирования = Неопределено,"","
		|	И ПериодыБронирования.Объект = &Объект");
		
	
	Запрос.УстановитьПараметр("Период",Период);
	Если НЕ ОбъектБронирования = Неопределено Тогда
	
		Запрос.УстановитьПараметр("Объект",ОбъектБронирования);
	
	КонецЕсли; 
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	
	ДатыИнтервалов = Новый Структура("ДатаНачала,ДатаОкончания");
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДатаНачала = '00010101000000' ИЛИ Выборка.ДатаОкончания = '00010101000000' Тогда
			Возврат Неопределено;	
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ДатыИнтервалов,Выборка);
	КонецЦикла;
	
	Возврат ДатыИнтервалов;
	
КонецФункции // 

Функция ПолучитьДанныеДляЗаполнения(ПараметрыПолученияДанных)

	СписокОбъектов = Обработки.Шахматка.ПолучитьСписокОбъектов(ПараметрыПолученияДанных);	

КонецФункции // ПолучитьДанныеДляЗаполнения()

Функция ПолучитьСтруктуруИзмерений(ПараметрыПолученияДанных)

			

КонецФункции // ПолучитьСтруктуруИзмерений()

Процедура ЗаполнитьЗначенияИзмерений(СписокОбъектов,ЭлементыИзмерения)
	Для каждого СтрокаИзСписка Из СписокОбъектов Цикл
		ТекУровень = СтрокаИзСписка.Уровень();
					
		ТекЗначение = СтрокаИзСписка[ТекУровень];
		Если ТекЗначение = NULL Тогда
			Если НЕ СтрокаИзСписка.Строки.Количество() = 0 Тогда
				ЗаполнитьЗначенияИзмерений(СтрокаИзСписка.Строки,ЭлементыИзмерения);	
			КонецЕсли;
		Иначе
			НовыйЭлементИзмерения = ЭлементыИзмерения.Добавить(ТекЗначение,ТекЗначение.Наименование);
			Если ТИПЗНЧ(ТекЗначение) = ТИП("СправочникСсылка.Номера") Тогда
				
				НовыйЭлементИзмерения.ЦветФона = Новый Цвет(251,249,236);
				НовыйЭлементИзмерения.ЦветРамки = Новый Цвет(160,160,160);	
				
			КонецЕсли; 
			Если НЕ СтрокаИзСписка.Строки.Количество() = 0 Тогда
				ЗаполнитьЗначенияИзмерений(СтрокаИзСписка.Строки,НовыйЭлементИзмерения.Элементы);	
				//ЗаполнитьЗначенияИзмерений(СтрокаИзСписка.Строки,ЭлементыИзмерения);		
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры


Процедура Сформировать(ПараметрыОтчета,АдресХранилища="") Экспорт
	
	ТаблицаБронирований = ПараметрыОтчета.ТаблицаБронирований;
	ТаблицаБронирований.Элементы.Очистить();
	ДатаНачала = ПараметрыОтчета.ДатаНачала;
	ДатаОкончания = ПараметрыОтчета.ДатаОкончания;
	
	ТаблицаБронирований.ТекущиеПериодыОтображения.Очистить();
	ТаблицаБронирований.ТекущиеПериодыОтображения.Добавить(ДатаНачала,КонецДня(ДатаОкончания));
	
	ТаблицаБронирований.НачалоПериодаОтображения = ДатаНачала;
	ТаблицаБронирований.КонецПериодаОтображения = КонецДня(ДатаОкончания);
	
	ТаблицаБронирований.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
	ТаблицаБронирований.КратностьПериодическогоВарианта = (КонецДня(ДатаОкончания)+1-ДатаНачала)/60/60/24;
	ТаблицаБронирований.ЦветЛиний = Новый Цвет(160,160,160);
	//ТаблицаБронирований.ЦветФона = Новый Цвет(244,236,197);
	ТаблицаБронирований.Измерения.Очистить();
	
	//Получим данные для заполнения таблицы бронирований
	ПараметрыПолученияДанных = Новый Структура();
	ПараметрыПолученияДанных.Вставить("ДатаНачала");
	ПараметрыПолученияДанных.Вставить("ДатаОкончания");
	ПараметрыПолученияДанных.Вставить("ТекущийПериод",ПараметрыОтчета.ТекущийПериод);
	
	Если ПараметрыОтчета.Свойство("ОбъектыОтбора") Тогда
 		ПараметрыПолученияДанных.Вставить("ОбъектыОтбора",ПараметрыОтчета.ОбъектыОтбора);
	КонецЕсли;
	
	//СтруктураИзмерений = ПолучитьСтруктуруИзмерений(ПараметрыПолученияДанных);
	//ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполнения(ПараметрыПолученияДанных);
	СписокОбъектов = Обработки.Шахматка.ПолучитьСписокОбъектов(ПараметрыПолученияДанных);
	
	Измерения = ТаблицаБронирований.Измерения;
	Измерения.Очистить();
	НовоеИзмерение = Измерения.Добавить("ГостиницыКорпуса","Гостиницы\Корпуса");
	НовоеИзмерение.ЦветФона = Новый Цвет(244,236,197);
	              
	ЭлементыИзмерения = НовоеИзмерение.Элементы;
	ЗаполнитьЗначенияИзмерений(СписокОбъектов.Строки,ЭлементыИзмерения);
		
	ЗаполнитьДанныеПоНомерам(ДатаНачала,ДатаОкончания,ТаблицаБронирований);
	//Для каждого ОбъектИзСписка Из СписокОбъектов Цикл
	//	
	//	ЭлементыИзмерения = НовоеИзмерение.Элементы;
	//	НовыйЭлИзм = ЭлементыИзмерения.Добавить(ОбъектИзСписка,ОбъектИзСписка.Наименование);
	//	//Добавим заглушку на строку гостиницы
	//	ОбъектыДляВывода = Обработки.Шахматка.ПолучитьДанныеПоОбъекту(ОбъектИзСписка);
	//	Для каждого ОбъектДляВывода Из ОбъектыДляВывода Цикл
	//	    //Добавим измерения по корпусам и номерам
	//		Если ТипЗНЧ(ОбъектДляВывода) = ТИП("СправочникСсылка.Корпуса") Тогда
	//			ДобавитьИзмеренияПоКорпусу(ОбъектДляВывода,НовыйЭлИзм);
	//		Иначе
	//			ДобавитьИзмеренияПоНомеру(ОбъектДляВывода,НовыйЭлИзм);
	//		КонецЕсли; 
	//		
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//ЗаполнитьДанныеПоНомерам(ДатаНачала,ДатаОкончания,ТаблицаБронирований);
	
	Результат = Новый Структура("Успех,Результат",Истина,"Возвращаемый результат выполнения процедуры");
	Результат.Вставить("ТаблицаБронирований",ТаблицаБронирований);
	//ДатаНачала = ПараметрыОтчета.ДатаНачала;
	//ДатаОкончания = ПараметрыОтчета.ДатаОкончания;
	//// Основные цвета таблицы
	//ФонШапки 	= Новый Цвет(244,236,197);
	//ТекстШапки 	= Новый Цвет(89,67,4);
	//Белый 		= Новый Цвет(255,255,255);
	//Черный 		= Новый Цвет(0,0,0);
	//
	//// Сформеруем таблицу отчета
	//Таблица = Новый ТабличныйДокумент;
	//ИмяМакета = "ПФ_XML_Шахматка";
	//Макет = ПолучитьМакет(ИмяМакета);
	//// начнем с заполненияи вывода шапкики отчета
	//ДанныеШапки = СформироватьШапку(ПараметрыОтчета,Макет);
	//ТекОбласть = Таблица.Вывести(ДанныеШапки);
	//ТекОбласть.ЦветФона = ФонШапки;
	//ТекОбласть.ЦветТекста = ТекстШапки;
	//
	//ОбластьУглаШапки = Макет.ПолучитьОбласть("Шапка|Объекты").Область();
	//
	//ДанныеОбъектов = ЗаполнитьТаблицуПоОбъектам(ПараметрыОтчета,Макет);
	//Таблица.Вывести(ДанныеОбъектов);
	//
	//Результат.Вставить("Таблица",Таблица);
	//Результат.Вставить("ФиксацияСверху",ОбластьУглаШапки.Низ);
	//Результат.Вставить("ФиксацияСлева",ОбластьУглаШапки.Право);
	ПоместитьВоВременноеХранилище(Результат,АдресХранилища);

КонецПроцедуры
