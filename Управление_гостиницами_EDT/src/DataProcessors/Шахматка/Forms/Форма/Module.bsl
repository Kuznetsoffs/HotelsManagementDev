//ЦветОбъекта 		= Новый Цвет(251,249,236);
//ЦветСвободного 		= Новый Цвет(245,242,221);
//ЦветНедоступного 	= Новый Цвет(200,200,200);
//ЦветЗабронированного 	= Новый Цвет(179,172,134);
//ЦветПредБронированного 	= Новый Цвет(179,220,134);

&НаКлиенте
Перем ОповещениеОЗавершенииФоновогоЗадания Экспорт;

&НаСервере
Функция ПолучитьКоличестовНомеровВБронированииНаСервере(БронированиеСсылка)

	//Возврат	Документы.КарточкаБронирования.ПолучитьКоличестовНомеровВБронировании(БронированиеСсылка);
	Возврат 1;
КонецФункции

#Область ОбработчикиОповещений
		
&НаКлиенте
Процедура ПослеЗакрытияОбработкиУправленияИнтервалами(Результат,ДопПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("СформироватьНачало",0.1,Истина);			

КонецПроцедуры


&НаКлиенте
Процедура ПослеВопросаОНенастроенныхИнтервалах(Результат,ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОбработкиУправленияИнтервалами",ЭтаФорма);       
		ФормаУправленияИнтервалами = ОткрытьФорму("Обработка.ПериодыБронирования.Форма.Форма",Новый Структура("ТекущийПериод",ДопПараметры),ЭтаФорма,ЭтаФорма,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
	КонецЕсли; 
	

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДействия(Результат,ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда //нажата кнопка "отмена"
	
			
	
	КонецЕсли; 	

КонецПроцедуры


&НаКлиенте
Процедура ПослеЗакрытияОкнаПросмотраЦен(Результат,ДопПараметры) Экспорт

	

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСписка(Результат,ДопПараметры) Экспорт

	Если Результат = Неопределено Тогда // выбора не произошло
		Возврат;
	КонецЕсли; 	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОкнаПросмотраЦен",ЭтаФорма);
	ПараметрыФормы = Новый Структура("СтрокиДляЗаполнения,ДействиеПриОткрытии",ДопПараметры,Результат.Значение); 
	
	//Если Результат.Значение = "Создать" Тогда
	//    Форма = ОткрытьФорму("Обработка.Шахматка.Форма.ПросмотрЦен",ПараметрыФормы,ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ИначеЕсли Результат.Значение = "ПросмотрЦен"  Тогда
	//	Форма = ОткрытьФорму("Обработка.Шахматка.Форма.ПросмотрЦен",ПараметрыФормы,ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеВыбораПериода(Результат,ДопПараметры) Экспорт

	Если НЕ Результат = Неопределено Тогда
	
		ТекущийПериод = Результат;
		УстановитьЗаголовокКнопкиВыбораПериода();
		ПодключитьОбработчикОжидания("СформироватьНачало",0.1,Истина);
	
	КонецЕсли; 

КонецПроцедуры


#КонецОбласти

&НаКлиенте
Процедура НастроитьВидимостьЭлементовКонтекстногоМеню(ВыделенныеЭлементы)
	
	КликНаБронировании = НЕ ВыделенныеЭлементы.Количество() = 0;
  	Элементы.грКомандыЭлементаБронрования.Видимость = КликНаБронировании;

КонецПроцедуры  

#Область ОбработчикиСобытийПланировщика

&НаКлиенте
Процедура ТаблицаБронированийПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБронированийПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБронированийВыбор(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Для каждого ЭлементСписка Из Элемент.ВыделенныеЭлементы Цикл
		ОткрытьДокументБронирования(ЭлементСписка.Значение);	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБронированийПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	//Для каждого ЭлементСписка Из Элемент.ВыделенныеЭлементы Цикл
	//	ОткрытьДокументБронирования(ЭлементСписка.Значение);	
	//КонецЦикла;		
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБронированийПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекОбъект = Значения.Получить("ГостиницыКорпуса");
	НачалоПериода = Начало;
	ОкончаниеПериода = Конец-1;
	Если ТекОбъект = Неопределено или НЕ ТИПЗНЧ(ТекОбъект) = ТИП("СправочникСсылка.Номера") Тогда
		Возврат;			
	КонецЕсли;
	
	
	Если НЕ НомерСвободенСервер(ТекОбъект,НачалоПериода,ОкончаниеПериода) Тогда
		Возврат;	
	КонецЕсли; 
	
	ПараметрыВыделения = Новый Структура;
	ПараметрыВыделения.Вставить("НачалоПериода",Начало);
	ПараметрыВыделения.Вставить("ОкончаниеПериода",Конец);
	ПараметрыВыделения.Вставить("ОбъектБронирования",Значения["ГостиницыКорпуса"]);
	ОбработкаПослеВыбораДействия = Новый ОписаниеОповещения("ПослеВыбораДействия",ЭтаФорма,ПараметрыВыделения);
	
	ОткрытьФорму("Обработка.Шахматка.Форма.ФормаДиалогаМеню",ПараметрыВыделения,,,,,ОбработкаПослеВыбораДействия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБронированийНажатиеНаЭлементеШкалыВремени(Элемент, ЭлементШкалыВремени, Дата)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаБронированийПриАктивизации(Элемент)
	НастроитьВидимостьЭлементовКонтекстногоМеню(Элемент.ВыделенныеЭлементы);
	
	// Вставить содержимое обработчика.
КонецПроцедуры

	
#КонецОбласти 

&НаКлиенте
Процедура УстановитьЗаголовокКнопкиВыбораПериода()

	Элементы.кнВыборПериода.Заголовок = Формат(ТекущийПериод,"ЧГ=") + " г."	

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода(Команда)
	ПараметрыФормы = Новый Структура("ТекущийПериод",ТекущийПериод);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПериода",ЭтаФорма);
	ОткрытьФорму("Обработка.ПериодыБронирования.Форма",ПараметрыФормы,ЭтаФорма,ЭтаФорма,,,ОписаниеОповещения,РежимОткрытияОкнаФОрмы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ТекущийПериод = 0 Тогда
		ТекущийПериод = ГОД(ТекущаяДатаСеанса());
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьЗаголовокКнопкиВыбораПериода();	
	ПодключитьОбработчикОжидания("СформироватьНачало",0.1,Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерСвободенСервер(Номер,НачалоПериода,ОкончаниеПериода)

	Возврат ДанныеПоНомерам.НомерСвободен(Номер,НачалоПериода,ОкончаниеПериода);

КонецФункции // НомерСвободенСервер()


&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ПодключитьОбработчикОжидания("СформироватьНачало",0.1,Истина);
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьДокументБронирования(ДокументСсылка)
	ФормаДокумента = ОткрытьФорму("Документ.КарточкаБронирования.Форма.ФормаДокумента",Новый Структура("Ключ",ДокументСсылка),ЭтаФорма,);	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьДатыИнтерваловБронирования(ПериодФормирования)

	Возврат Обработки.Шахматка.ПолучитьДатыИнтерваловБронирования(ПериодФормирования);	

КонецФункции // ()
		
&НаСервере
Процедура ДобавитьИзмеренияПоНомеру(ОбъектДляВывода,ИзмерениеРодитель)

	НовыйЭлИзм = ИзмерениеРодитель.Элементы.Добавить(ОбъектдляВывода,ОбъектДляВывода.Наименование);	
	НовыйЭлИзм.ЦветФона = Новый Цвет(251,249,236);
	НовыйЭлИзм.ЦветРамки = Новый Цвет(160,160,160);
КонецПроцедуры		
		
&НаСервере
Процедура ДобавитьИзмеренияПоКорпусу(ОбъектДляВывода,ИзмерениеРодитель)

	НовыйЭлИзм = ИзмерениеРодитель.Элементы.Добавить(ОбъектдляВывода,ОбъектДляВывода.Наименование);		
	ОбъектыДляВывода = Обработки.Шахматка.ПолучитьДанныеПоОбъекту(ОбъектДляВывода);
	Для каждого ЭлементМассиваНомер Из ОбъектыДляВывода Цикл
	
		ДобавитьИзмеренияПоНомеру(ЭлементМассиваНомер,НовыйЭлИзм);	
	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуБронирований(ТаблицаБронирований)
	
	ТаблицаБронирований.ТекущиеПериодыОтображения.Очистить();
	ДатаНачала = Дата(2018,06,01);
	ДатаОкончания = Дата(2018,09,30);
	ТаблицаБронирований.ТекущиеПериодыОтображения.Добавить(ДатаНачала,КОнецДня(ДатаОкончания));
	ТаблицаБронирований.НачалоПериодаОтображения = ДатаНачала;
	ТаблицаБронирований.КонецПериодаОтображения = КонецДня(ДатаОкончания);
	ТаблицаБронирований.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
	ТаблицаБронирований.КратностьПериодическогоВарианта = (КонецДня(ДатаОкончания)+1-ДатаНачала)/60/60/24;
	ТаблицаБронирований.ЦветЛиний = Новый Цвет(160,160,160);
	//ТаблицаБронирований.ЦветФона = Новый Цвет(244,236,197);
	ТаблицаБронирований.Измерения.Очистить();
	СписокОбъектов = Обработки.Шахматка.ПолучитьСписокОбъектов(2018);
	
	Измерения = ТаблицаБронирований.Измерения;
	Измерения.Очистить();
	НовоеИзмерение = Измерения.Добавить("ГостиницыКорпуса","Гостиницы\Корпуса");
	НовоеИзмерение.ЦветФона = Новый Цвет(244,236,197);
	              
	Для каждого ОбъектИзСписка Из СписокОбъектов Цикл
		
		ЭлементыИзмерения = НовоеИзмерение.Элементы;
		НовыйЭлИзм = ЭлементыИзмерения.Добавить(ОбъектИзСписка,ОбъектИзСписка.Наименование);
		//Добавим заглушку на строку гостиницы
		ОбъектыДляВывода = Обработки.Шахматка.ПолучитьДанныеПоОбъекту(ОбъектИзСписка);
		Для каждого ОбъектДляВывода Из ОбъектыДляВывода Цикл
		    //Добавим измерения по корпусам и номерам
			Если ТипЗНЧ(ОбъектДляВывода) = ТИП("СправочникСсылка.Корпуса") Тогда
				ДобавитьИзмеренияПоКорпусу(ОбъектДляВывода,НовыйЭлИзм);
			Иначе
				ДобавитьИзмеренияПоНомеру(ОбъектДляВывода,НовыйЭлИзм);
			КонецЕсли; 
			
			
		КонецЦикла;
		
	КонецЦикла;
	
	//ЗаполнитьДанныеПоНомерам(ДатаНачала,ДатаОкончания,ТаблицаБронирований);
	
КонецПроцедуры

&НаСервере
Функция СформироватьНаСервере(ПараметрыПроцедуры)

	//ПараметрыОперации - структура
	//	ИдентификаторФормы ИдентификаторФормы
	//	ДополнительныйРезультат Ложь
	//	ОжидатьЗавершение  ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2));
	//	НаименованиеФоновогоЗадания  ""
	//	КлючФоновогоЗадания "");
	//	АдресРезультата  Неопределено);
	//	ЗапуститьНеВФоне Ложь);
	//	ЗапуститьВФоне Ложь);
	//	БезРасширений Ложь);
	
	ПараметрыОперации = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыОперации.НаименованиеФоновогоЗадания = "Формирование отчета 'Шахматка'";	
	//	Мы знаем, что вторым элементом массива передается адрес сохранения результата
	ПараметрыОперации.АдресРезультата = ПараметрыПроцедуры[1]; 
	
	Результат = ДлительныеОперации.ВыполнитьВФоне("Обработки.Шахматка.Сформировать",ПараметрыПроцедуры,ПараметрыОперации);
	
	Возврат Результат;
КонецФункции // СформироватьНаСервере()

&НаКлиенте
Процедура РазвернутьИзмеренияТаблицыБронирований()

	СоответствиеИзмерений = Новый Соответствие();
	Для каждого Измерение Из ТаблицаБронирований.Измерения Цикл
		Для каждого ЭлементИзмерения Из Измерение.Элементы Цикл
			СоответствиеИзмерений.Очистить();
			СоответствиеИзмерений.Вставить(Измерение.Значение,ЭлементИзмерения.Значение);
			Элементы.ТаблицаБронирований.РазвернутьЭлементИзмерения(Новый ФиксированноеСоответствие(СоответствиеИзмерений),Истина);
		
		КонецЦикла;		
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ПослеФормированияОтчетаВФоне(Результат, ДопПараметры = Неопределено) Экспорт

	Если ЗначениеЗаполнено(АдресРезультата) Тогда
	
		
	ИначеЕсли НЕ Результат.Свойство("АдресРезультата",АдресРезультата) Тогда
		
		
	ИначеЕсли НЕ ДопПараметры = Неопределено Тогда
		
		ДопПараметры.Свойство("АдресРезультата",АдресРезультата);
	
	КонецЕсли; 
	
	Если НЕ Результат.КраткоеПредставлениеОшибки = Неопределено Тогда
	
	Иначе
	
	КонецЕсли; 	
	
	//работатьРезультатСервер(АдресРезультата);
	ТаблицаБронирований = ПолучитьИзВременногоХранилища(Результат.АдресРезультата).ТаблицаБронирований;
////#Если ВебКлиент Тогда
//Для каждого Измерение Из ТаблицаБронирований.Измерения Цикл
//	Для каждого ЭлементИзмерения Из Измерение.Элементы Цикл
//		ЗначениеИзмерения = Новый Соответствие();
//		ЗначениеИзмерения.Вставить(Измерение.Значение,ЭлементИзмерения.Значение);
//		Элементы.ТаблицаБронирований.РазвернутьЭлементИзмерения(Новый ФиксированноеСоответствие(ЗначениеИзмерения),Истина);
//	КонецЦикла;
//КонецЦикла; 

////#КонецЕсли
	Элементы.Сформировать.Доступность = Истина;
	Элементы.ТаблицаБронирований.Видимость = Истина;
КонецПроцедуры

Функция СтатусФоновогоЗадания()

	СтатусЗадания = Новый Структура("Статус","Выполняется");
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Состояние = Задание.Состояние;
	Если НЕ Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		СтатусЗадания.Вставить("КраткоеПредставлениеОшибки",КРаткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
		СтатусЗадания.Вставить("ПодробноеПредставлениеОшибки",ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
		
		Если Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			
			СтатусЗадания.Статус = "Завершено";
		ИначеЕсли Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				
			СтатусЗадания.Статус = "Завершено";
		ИначеЕсли Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			
			СтатусЗадания.Статус = "Отменено";
		КонецЕсли;
	    
	КонецЕсли; 
	
	Возврат СтатусЗадания;

КонецФункции // СтатусФоновогоЗадания()

&НаКлиенте
Процедура КонтрольДлительнойОперации();
	
	
	СтатусОперации = СтатусФоновогоЗадания();
	Если СтатусОперации.Статус = "Выполняется" Тогда
		ПодключитьОбработчикОжидания("КонтрольДлительнойОперации",3,Истина);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершенииФоновогоЗадания,СтатусОперации);	
	КонецЕсли; 	

КонецПроцедуры


&НаКлиенте
Процедура ОжидатьЗавершения(Знач ДлительнаяОперация, Знач ОповещениеОЗавершении = Неопределено, 
	Знач ПараметрыОжидания = Неопределено) Экспорт
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		Если ОповещениеОЗавершении <> Неопределено Тогда
			Если ДлительнаяОперация.Статус <> "Отменено" Тогда
				Результат = ДлительнаяОперация;
				Результат.Вставить("Сообщения", ?(ПараметрыОжидания <> Неопределено И ПараметрыОжидания.ВыводитьСообщения, 
					ДлительнаяОперация.Сообщения, Неопределено));
			Иначе
				Результат = Неопределено;
			КонецЕсли;
			
			Если ДлительнаяОперация.Статус = "Выполнено" И ПараметрыОжидания <> Неопределено Тогда
				//ПоказатьОповещение(ПараметрыОжидания);
			КонецЕсли;
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	//Если на момент обработки операция не была завершена 
	//запустим обработчик ожидания пока не поменяется статус задания 
	ОповещениеОЗавершенииФоновогоЗадания = ОповещениеОЗавершении;
	ПодключитьОбработчикОжидания("КонтрольДлительнойОперации",3,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНачало()
	
	Если ТаблицаБронирований.Измерения[0].Элементы.Количество() = 0 Тогда //Планировщик пустой и требуется заполнить измерения
		
		
	КонецЕсли; 
	
	АдресРезультата = Неопределено;
	ИдентификаторЗадания = Неопределено;
	Элементы.Сформировать.Доступность = Ложь;
	
	ДатыИнтервалов = ПолучитьДатыИнтерваловБронирования(ТекущийПериод);
	
	Если ДатыИнтервалов = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОНенастроенныхИнтервалах",ЭтаФорма,ТекущийПериод);
		
		ПоказатьВопрос(ОписаниеОповещения,"По текущему периоду не настроены интервалы бронирования!
		|Хотите настроить сейчас?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Невозможно сформировать отчет!");
		Возврат;
	
	КонецЕсли;
	
	ПараметрыФормированияОтчета = ДатыИнтервалов;
	ПараметрыФормированияОтчета.Вставить("ТекущийПериод",ТекущийПериод);
	ПараметрыФормированияОтчета.Вставить("ТаблицаБронирований",ТаблицаБронирований);
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыФормированияОтчета);
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор);
	ПараметрыЭкспортнойПРоцедуры.Добавить(АдресХранилища);
	
	Результат = СформироватьНаСервере(ПараметрыЭкспортнойПроцедуры);
	
	ДополнительныеПараметры = Новый Структура("АдресРезультата",АдресХранилища);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеФормированияОтчетаВФоне",ЭтаФорма,ДополнительныеПараметры);
	Если Результат.Статус = "Выполнено" Тогда
	
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,Результат);
		Возврат;
	
	КонецЕсли; 
	
	//Запустим обработку ожидания выполнения фонового задания (временно, возможно, пока не напишу глобальные процедуры)
	//Вместо // ДлительныеОперацииКлиент.ОжидатьЗавершения(Результат,ОписаниеОповещения);
	
	АдресРезультата = Результат.АдресРезультата;
	ОжидатьЗавершения(Результат,ОписаниеОповещения);
	
	//Обработка результата и запуск ожидания завершения
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	ПодключитьОбработчикОжидания("СформироватьНачало",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБронированийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, ЗначенияИзмерений)
	Состояние("Проверка перетаскивания")
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБронированийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, ЗначенияИзмерений)
	Состояние("Перетаскивание");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБронированийПроверкаПеретаскиванияВнутри(Элемент, ПараметрыПеретаскивания, ВариантИзмененияГраниц, ДействиеПеретаскивания, Отказ)
	
	Если Элемент.ВыделенныеЭлементы.Количество() > 1 Тогда
		Отказ = ИСТИНА; //Временно уберем возможность перетаскивания нескольких элементов
	КонецЕсли; 
	ТекущийЭлементПланировщика = ПараметрыПеретаскивания[0].Элемент;
	Если ДействиеПеретаскивания = ДействиеПеретаскиванияВнутриПланировщика.Создание Тогда
		
		Если НЕ ТекущийЭлементПланировщика = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли ДействиеПеретаскивания = ДействиеПеретаскиванияВнутриПланировщика.Редактирование Тогда
		Если НЕ ВариантИзмененияГраниц = ВариантИзмененияГраницПеретаскиванияВнутриПланировщика.НачалоИКонец Тогда
		
			Отказ = Истина;	
		
		КонецЕсли; 	
		
	КонецЕсли;
	
	
	
	//ОбъектЭлементаПриемника = Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений["ГостиницыКорпуса"];
	//
	//Если НЕ ТИПЗНЧ(ОбъектЭлементаПриемника) = Тип("СправочникСсылка.Номера") Тогда
	//		
	//КонецЕсли; 
	//
	//ТекущийЭлементПланировщика = ПараметрыПеретаскивания[0].Элемент;
	//Если ТекущийЭлементПланировщика = Неопределено Тогда
	//
	//	Отказ = Истина;
	//
	//КонецЕсли; 
	// БронированиеСсылка = ТекущийЭлементПланировщика.Элемент.Значение;
	//КоличествоНомеров = 1; //ПолучитьКоличестовНомеровВБронированииНаСервере(БронированиеСсылка);
	//Состояние(КоличествоНомеров);
	//Если НЕ КоличествоНомеров = 1 Тогда
	//    
	//	Отказ = Истина;
	//                                           
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОПереносе(ПараметрыЗакрытия,ДопПараметры) Экспорт

	Если ПараметрыЗакрытия.Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли; 	
		
КонецПроцедуры

&НаСервере
Функция ПеретаскиваниеВозможно(ПараметрыЭлемента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КарточкаБронированияСоставБрони.Номер КАК Номер
		|ИЗ
		|	Документ.КарточкаБронирования.СоставБрони КАК КарточкаБронированияСоставБрони
		|ГДЕ
		|	КарточкаБронированияСоставБрони.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	КарточкаБронированияСоставБрони.Номер";
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыЭлемента.БронированиеСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().Количество() = 1;	

КонецФункции // ПреетаскиваниеВозможно()

&НаСервере
Функция ЗначенияИзменились(ПараметрыЭлемента)
	
	БронированиеСсылка = ПараметрыЭлемента.БронированиеСсылка;
	СоставБрони = БронированиеСсылка.СоставБрони;
	
	Если СоставБрони.Найти(ПараметрыЭлемента.Номер,"Номер") = Неопределено Тогда
		Возврат Истина;	
	ИначеЕсли НЕ БронированиеСсылка.ДатаЗаезда = ПараметрыЭлемента.Начало Тогда
		Возврат ИСТИНА;
	ИначеЕсли НЕ БронированиеСсылка.ДатаВыселения = ПараметрыЭлемента.Конец Тогда
		Возврат ИСТИНА;
	КонецЕсли; 
	
	Возврат ЛОЖЬ

КонецФункции // ЗначенияИзменились()


&НаКлиенте
Процедура ТаблицаБронированийПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	ТекущийЭлементПланировщика = Элемент.ВыделенныеЭлементы[0];
	ОбъектЭлементаПриемника = ТекущийЭлементПланировщика.ЗначенияИзмерений["ГостиницыКорпуса"];
	
	ОтменаРедактирования = Истина; //Всегда отменяем бронирование т.к. перенос элемента будет 
								   //производиться в зависимости от ответа в диалоге переноса
								   
	//Если элемент переносится на измерение имеющее тип значение отличное от Справочник.Номера
	//перенос не производится.
	Если НЕ ТИПЗНЧ(ОбъектЭлементаПриемника)  = ТИП ("СправочникСсылка.Номера") Тогда
		Возврат;
	КонецЕсли;
	
	БронированиеСсылка = ТекущийЭлементПланировщика.Значение;
	ПараметрыНовогоЭлемента = Новый Структура;
	ПараметрыНовогоЭлемента.Вставить("БронированиеСсылка",БронированиеСсылка);
	ПараметрыНовогоЭлемента.Вставить("Начало",ТекущийЭлементПланировщика.Начало);
	ПараметрыНовогоЭлемента.Вставить("Конец",ТекущийЭлементПланировщика.Конец);
	ПараметрыНовогоЭлемента.Вставить("Номер",ОбъектЭлементаПриемника);
	
	Если НЕ ПеретаскиваниеВозможно(ПараметрыНовогоЭлемента) Тогда
		
		//ОписаниеОповещения = Новый ОписаниеОповещения
		ПоказатьПредупреждение(,"Данный элемент нельзя редактировать перетаскиванием",,"Внимание!");
		Возврат;
	КонецЕсли;
	
	//Если НомерЗанят() Тогда
	//
	//	
	//
	//КонецЕсли; 
	
	
	Если НЕ ЗначенияИзменились(ПараметрыНовогоЭлемента)  Тогда //если значения элемента не изменились - элемент вернулся на свое место
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОПереносе",ЭтаФорма,Элемент);
	
	ОткрытьФорму("Обработка.Шахматка.Форма.ФормаДиалогаПереноса",ПараметрыНовогоЭлемента,ЭтаФорма,ЭтаФорма,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	//Форма = ПолучитьФорму("Обработка.Шахматка.Форма.ФормаДиалогаПереноса",,ЭтаФорма,ЭтаФорма);
	//Форма.Открыть();
	
КонецПроцедуры



