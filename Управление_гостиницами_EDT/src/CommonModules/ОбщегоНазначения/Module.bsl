#Область ПрограммныйИнтерфейс
//Проставляет значение номера строки таблицы значений
//при необходимости, создает колонку для нуменрации строк
//Параметры:
//Таблица - ТаблицаЗначений - обрабатываемая таблица значений	
//ИмяКолонкиНомераСтроки - Строка - строка с именем заполняемой колонки		
Процедура ПронумероватьТаблицуЗначений(Таблица, ИмяКолонкиНомераСтроки) Экспорт
	Если Таблица.Колонки.Найти(ИмяКолонкиНомераСтроки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонкиНомераСтроки, ОбщегоНазначенияКлиентСервер.ОписаниеТиповЧисла(15, 0));
	КонецЕсли;

	КоличествоСтрок = Таблица.Количество() - 1;
	Для НомерСтроки = 0 По КоличествоСтрок Цикл
		Таблица[НомерСтроки][ИмяКолонкиНомераСтроки] = НомерСтроки;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяСсылкиПеречисления(Ссылка)Экспорт

	Возврат Ссылка.Метаданные().ЗначенияПеречисления.Получить(Перечисления[Ссылка.Метаданные().Имя].Индекс(Ссылка)).Имя;

КонецФункции // ИмяПеречисления(Ссылка)

Процедура ВыполнитьМетодОбъекта(Знач Объект, Знач Метод, Знач Параметры = Неопределено) Экспорт
	
	ПараметрыСтрокой = "";
	Если НЕ Параметры = Неопределено И НЕ Параметры.Количество() = 0 Тогда
		
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			
			ПараметрыСтрокой = ПараметрыСтрокой + "Параметры[" + Индекс + "],";
			
		КонецЦикла;
		ПараметрыСтрокой = Сред(ПараметрыСтрокой,1,СтрДлина(ПараметрыСтрокой) - 1);
	
	КонецЕсли; 
	
	УстановитьБезопасныйРежим(Истина);
	Выполнить "Объект." + Метод + "(" + ПараметрыСтрокой + ")";
	
КонецПроцедуры

Процедура ВыполнитьМетодМенеджера(Знач МетодМенеджера, Параметры = Неопределено) Экспорт

	ПараметрыСтрокой = "";
	Если НЕ Параметры = Неопределено И НЕ Параметры.Количество() = 0 Тогда
		
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			
			ПараметрыСтрокой = ПараметрыСтрокой + "Параметры[" + Индекс + "],";
			
		КонецЦикла;
		ПараметрыСтрокой = Сред(ПараметрыСтрокой,1,СтрДлина(ПараметрыСтрокой) - 1);
	
	КонецЕсли; 	
	
	УстановитьБезопасныйРежим(Истина);	
	Выполнить МетодМенеджера + "(" + ПараметрыСтрокой + ")";
КонецПроцедуры

Функция ДанныеИзБезопасногоХранилища(Владелец, Хранилище, Ключ)
	
	Результат = Новый Структура(Ключ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БезопасноеХранилищеДанных.Данные КАК Данные
	|ИЗ
	|	РегистрСведений." + Хранилище + " КАК БезопасноеХранилищеДанных
	|ГДЕ
	|	БезопасноеХранилищеДанных.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПрочитатьДанныеИзБезопасногоХранилища(Владелец,Ключи = "Пароль",ОбщиеДанные = Неопределено) Экспорт

	Результат = ДанныеИзБезопасногоХранилища(Владелец,"БезопасноеХранилищеДанных",Ключи);
	Если НЕ Результат = Неопределено И Результат.Количество() = 1 Тогда
		Возврат ?(Результат.Свойство(Ключи), Результат[Ключи], Неопределено);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПрочитатьДанныеИзБезопасногоХранилища 

#КонецОбласти