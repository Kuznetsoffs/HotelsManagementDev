Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоВебКлиент() Экспорт
	
#Если ВебКлиент Тогда
	Возврат Истина;
#ИначеЕсли Клиент Или ВнешнееСоединение Тогда
	Возврат Ложь;
#Иначе
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыКлиента.Количество() = 0
	   И ТекущийРежимЗапуска() <> Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Не заполнены параметры клиента на сервере.'");
	КонецЕсли;
	
	//ЭтоВебКлиент = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить("ЭтоВебКлиент");
	//
	//Если ЭтоВебКлиент = Неопределено Тогда
	//	Возврат Ложь; // Нет клиентского приложения.
	//КонецЕсли;
	
	//Возврат ЭтоВебКлиент;
	Возврат Ложь;
#КонецЕсли
	
КонецФункции

Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	    	НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура СообщитьПользователю()

	

КонецПроцедуры

#Область ФункцииИПроцедурыРаботыСоСтроками

Функция СодержитТолькоДопустимые(Строка,Символы) Экспорт
	Для СЧ = 1 По СтрДлина(Строка) Цикл
		Если СтрНайти(Символы,Сред(Строка,СЧ,1)) = 0 Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла;
	Возврат ИСТИНА;
КонецФункции // СодержитТолькоДопустимые()


Функция ЕстьСимволыВНАчалеИЛИВКонце(Строка,Символы) Экспорт
	СимволыНайдены = НЕ СтрНайти(Символы,Лев(Строка,1)) = 0 ИЛИ НЕ СтрНайти(Символы,Прав(Строка,1)) = 0; 
	Если СимволыНайдены Тогда
		Возврат ИСТИНА;
	Иначе
	  	Возврат ЛОЖЬ;
	КонецЕсли; 
КонецФункции // ЕстьСимволыВНАчалеИЛИВКонце()

#КонецОбласти

#Область РаботаСАдресамиЭлектроннойПочты

Функция АдресСоответстуетТребованиям(Знач Адрес,РазрешеныЛокальныеАдреса = ЛОЖЬ) Экспорт
	
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Цифры = "0123456789";
	СпецСимволы = ".@_-:+";
	
	//Проверка @
	Если НЕ СтрЧислоВхождений(Адрес,"@") = 1 Тогда
		Возврат ЛОЖЬ	
	КонецЕсли; 	
	
	//Двоеточие разрешено 1 раз
	Если СтрЧислоВхождений(Адрес,":") > 1 Тогда
		Возврат ЛОЖЬ	
	КонецЕсли; 	
	
	//две точки подряд - недопустимы
	Если НЕ СтрНайти(Адрес,"..") = 0 Тогда
		Возврат ЛОЖЬ	
	КонецЕсли; 
	
	//Переведем адрес в нижний регистр
	Адрес = НРЕГ(Адрес);
	
	//Проверим наличие только допустимых символов
	Если НЕ СодержитТолькоДопустимые(Адрес,Буквы+Цифры+СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ТекПозиция = СтрНайти(Адрес,"@");
	ЛокальнаяЧасть = Лев(Адрес,ТекПозиция - 1);
	Домен = Сред(Адрес,ТекПозиция + 1);
	
	//Проверим правилльность указания Локальной части и Домена
	Если СтрДлина(ЛокальнаяЧасть) = 0 ИЛИ 
		СтрДлина(ЛокальнаяЧасть) > 64 ИЛИ
	    СтрДлина(Домен) = 0 ИЛИ
		СтрДлина(Домен) > 255 Тогда
		
		Возврат ЛОЖЬ;
	КонецЕсли; 
	
	//Ни каких спец символов а начале или в конце домена
	Если ЕстьСимволыВНАчалеИЛИВКонце(Домен,СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Для не локальных доменов должна быть хотя бы одна точка
	Если НЕ РазрешеныЛокальныеАдреса И СтрНайти(Домен,".") = 0 Тогда
		Возврат ЛОЖЬ;		
	КонецЕсли;
	
	//проверим домен на наличие других символов
	Если СтрНайти(Домен,"_") > 0
		ИЛИ СтрНайти(Домен,":") > 0 
		ИЛИ СтрНайти(Домен,"+") > 0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли; 
	
	//Длина домена верхнего уровня должна быть минимум 2 буквы
	ТекПозиция = СтрНайти(Домен,".",НаправлениеПоиска.СКонца);
	Зона = Сред(Домен,ТекПозиция + 1);
	Возврат РазрешеныЛокальныеАдреса ИЛИ СтрДлина(Зона) >= 2 И СодержитТолькоДопустимые(Зона,Буквы);

КонецФункции // АдресСоответстуетТребованиям()()

	
#КонецОбласти

#Область РаботаСДеревомЗначений

// Рекурсивное обслуживание иерархических пометок с тремя состояниями в дереве. 
//
// Параметры:
//    ДанныеСтроки - ДанныеФормыЭлементДерева - Пометка хранится в числовой колонке "Пометка".
//
Процедура ИзменениеПометки(ДанныеСтроки) Экспорт
	ДанныеСтроки.Пометка = ДанныеСтроки.Пометка % 2;
	ПроставитьПометкиВниз(ДанныеСтроки);
	ПроставитьПометкиВверх(ДанныеСтроки);
КонецПроцедуры

// Рекурсивное обслуживание иерархических пометок с тремя состояниями в дереве. 
//
// Параметры:
//    ДанныеСтроки - ДанныеФормыЭлементДерева - Пометка хранится в числовой колонке "Пометка".
//
Процедура ПроставитьПометкиВниз(ДанныеСтроки) Экспорт
	Значение = ДанныеСтроки.Пометка;
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		Потомок.Пометка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

// Рекурсивное обслуживание иерархических пометок с тремя состояниями в дереве. 
//
// Параметры:
//    ДанныеСтроки - ДанныеФормыЭлементДерева - Пометка хранится в числовой колонке "Пометка".
//
Процедура ПроставитьПометкиВверх(ДанныеСтроки) Экспорт
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	Если РодительСтроки <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Для Каждого Потомок Из РодительСтроки.ПолучитьЭлементы() Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь Или Булево(Потомок.Пометка);
		КонецЦикла;
		Если ВсеИстина Тогда
			РодительСтроки.Пометка = 1;
		ИначеЕсли НеВсеЛожь Тогда
			РодительСтроки.Пометка = 2;
		Иначе
			РодительСтроки.Пометка = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(РодительСтроки);
	КонецЕсли;
КонецПроцедуры
	
#КонецОбласти

Функция ОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти) Экспорт

	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти));

КонецФункции

Функция ОписаниеТиповСтрока(ДлинаСтроки = 1000) Экспорт
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
КонецФункции


Функция ОписаниеТиповДаты(ЧастьДаты = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЧастьДаты) Тогда
		ЧастьДаты = ЧастиДаты.Дата;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастьДаты);
	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);
	
КонецФункции

