#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий	
	
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если НЕ УправлениеГостиницамиСервер.ЭтоГостиничныйКомплекс(Гостиница) Тогда
	
		НомерЭлемента = ПроверяемыеРеквизиты.Найти("Корпус");
		Если НЕ НомерЭлемента = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерЭлемента);
		КонецЕсли; 
		
	КонецЕсли;     
КонецПроцедуры

Функция ПолучитьКонфликтныеДанные(Номер,Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыНомеров.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СтатусыНомеров КАК СтатусыНомеров
		|ГДЕ
		|	СтатусыНомеров.Номер = &Номер
		|	И СтатусыНомеров.Дата = &Дата";
	Запрос.УстановитьПараметр("Номер",Номер);
	Запрос.УстановитьПараметр("Дата",Дата);	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Регистратор;
	
КонецФункции

Процедура ОбработкаПроведения(Отказ, Режим)
	//Определим текущие статусы номеров для записи
	
	СтатусНомераЗанят = Перечисления.СтатусыНомеров.Забронирован;
	СтатусНомераСвободен = Перечисления.СтатусыНомеров.Свободен;
	Если СтатусБрони = Перечисления.СтатусБрони.Отменена Тогда
		СтатусНомераЗанят = Перечисления.СтатусыНомеров.Свободен;	
	ИначеЕсли СтатусБрони = Перечисления.СтатусБрони.Заселение Тогда
		СтатусНомераЗанят = Перечисления.СтатусыНомеров.Занят;	
	КонецЕсли; 
	
	//Движения выполняемые при условии, что бронь не была отменена
	Если НЕ СтатусБрони = Перечисления.СтатусБрони.Отменена Тогда 
		
		// регистр СтатусыНомеров
		
		Движения.СтатусыНомеров.Записывать = Истина;
		Для Каждого ТекСтрокаСоставБрони Из СоставБрони Цикл
			Для Приращение = 0 По ТекСтрокаСоставБрони.КоличествоДней - 1 Цикл

				ДатаСтатуса = РаботаСДатамиКлиентСервер.ПрибавитьДень(ТекСтрокаСоставБрони.ДатаЗаезда, Приращение);
				Если Не НачалоДня(ДатаСтатуса) = НачалоДня(ДатаВыселения) Тогда //Для дня выселения статус занятости не устанавливаем

					Движение = Движения.СтатусыНомеров.Добавить();
					Движение.Гостиница = Гостиница;
					Движение.Номер = ТекСтрокаСоставБрони.Номер;
					Движение.Дата = ДатаСтатуса;
					Движение.Корпус = Корпус;
					Движение.Статус = СтатусНомераЗанят;
					
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
		
		
		// регистр ЗанятостьНомеров
		//Регистрирует изменение статуса номера на начало и окончание периода бронирования (заселения)
		Движения.ЗанятостьНомеров.Записывать = Истина;
		
		ТаблицаСоставаБрони = СоставБрони.Выгрузить();
		СписокНомеров = СоставБрони.Выгрузить(,"Номер");
		СписокНомеров.Свернуть("Номер");
		МассивНомеров = СписокНомеров.ВыгрузитьКолонку("Номер");
		МассивДвижений = Новый Массив;
		Для каждого ТекущийНомер Из МассивНомеров Цикл
							
			НайденыеСтроки = ТаблицаСоставаБрони.НайтиСтроки(Новый Структура("Номер",ТекущийНомер));
			ДанныеДвижения = Новый Структура();
			Для каждого СтрокаБрони Из НайденыеСтроки Цикл
			
				Если ДанныеДвижения.Свойство("ДатаСвободен") Тогда
				  	Если СтрокаБрони.ДатаЗаезда = ДанныеДвижения.ДатаСвободен + 1 Тогда
					    Если СтрокаБрони.ДатаВыселения = ДатаВыселения Тогда
							//Установим дату и время выселения на конец предыдущего дня пока я не придумаю что то еще						
							ДанныеДвижения.ДатаСвободен = НачалоДня(СтрокаБрони.ДатаВыселения)	- 1;
						Иначе
							ДанныеДвижения.ДатаСвободен = КонецДня(СтрокаБрони.ДатаВыселения);
						КонецЕсли;
					Иначе
						МассивДвижений.Добавить(ДанныеДвижения);
						ДанныеДвижения = Новый Структура;                 
						ДанныеДвижения.Вставить("Номер",СтрокаБрони.Номер);
						ДанныеДвижения.Вставить("ДатаЗанят",СтрокаБрони.ДатаЗаезда);
						ДатаСвободен = ?(СтрокаБрони.ДатаВыселения = ДатаВыселения,НачалоДня(СтрокаБрони.ДатаВыселения)	- 1,КонецДня(СтрокаБрони.ДатаВыселения));
						ДанныеДвижения.Вставить("ДатаСвободен",ДатаСвободен);
					КонецЕсли;
				Иначе
					ДанныеДвижения.Вставить("Номер",СтрокаБрони.Номер);
					ДанныеДвижения.Вставить("ДатаЗанят",СтрокаБрони.ДатаЗаезда);
					ДатаСвободен = ?(СтрокаБрони.ДатаВыселения = ДатаВыселения,НачалоДня(СтрокаБрони.ДатаВыселения)	- 1,КонецДня(СтрокаБрони.ДатаВыселения));
					ДанныеДвижения.Вставить("ДатаСвободен",ДатаСвободен);	
				КонецЕсли;
				
				
			
			КонецЦикла;
			МассивДвижений.Добавить(ДанныеДвижения);
			
		КонецЦикла;
		
		
		Для Каждого ДанныеДвижения Из МассивДвижений Цикл
			//Запишем период занятости номера
			Движение = Движения.ЗанятостьНомеров.Добавить();
			Движение.Период = ДанныеДвижения.ДатаЗанят;
			Движение.Гостиница = Гостиница;
			Движение.Корпус = Корпус;
			Движение.Номер = ДанныеДвижения.Номер;
			Движение.Статус = СтатусНомераЗанят;
			//Запишем период освобождения номера
			Движение = Движения.ЗанятостьНомеров.Добавить();
			Движение.Период = ДанныеДвижения.ДатаСвободен;
			Движение.Гостиница = Гостиница;
			Движение.Корпус = Корпус;
			Движение.Номер = ДанныеДвижения.Номер;
			Движение.Статус = СтатусНомераСвободен;
		КонецЦикла;
		
		// регистр Выручка Приход
		Движения.Выручка.Записывать = Истина;
		Для Каждого ТекСтрокаСоставБрони Из СоставБрони Цикл
			Движение = Движения.Выручка.Добавить();
			//Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = ДатаВыселения;
			Движение.Гостиница = Гостиница;
			Движение.Корпус = Корпус;
			Движение.Номер = ТекСтрокаСоставБрони.Номер;
			Движение.Сумма = ТекСтрокаСоставБрони.Сумма;
		КонецЦикла;
		
		// регистр РасчетыСКлиентами Расход
		Движения.РасчетыСКлиентами.Записывать = Истина;
		Движение = Движения.РасчетыСКлиентами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.ОбъектРасчетов = Ссылка;
		Движение.Сумма = СуммаДокумента;
		
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#КонецЕсли